import cv2
import numpy as np
from rembg import remove
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageEnhance, ImageOps
import os
import tkinter as tk
from tkinter import filedialog
import random
import math

def remove_background(input_path):
    input_image = Image.open(input_path)
    output = remove(input_image)
    return output

def select_file():
    pictures_dir = os.path.expanduser("~/Pictures")
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        initialdir=pictures_dir,
        title="Select an image file",
        filetypes=(("Image files", "*.png *.jpg *.jpeg"), ("All files", "*.*"))
    )
    return file_path

def create_output_folder():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    output_folder = os.path.join(script_dir, "Output")
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    return output_folder

def generate_pastel_color():
    return (
        random.randint(180, 255),
        random.randint(180, 255),
        random.randint(180, 255)
    )

def generate_gradient_background(width, height):
    color1 = generate_pastel_color()
    color2 = generate_pastel_color()
    
    image = Image.new('RGB', (width, height))
    draw = ImageDraw.Draw(image)
    for y in range(height):
        r = int(color1[0] * (height - y) / height + color2[0] * y / height)
        g = int(color1[1] * (height - y) / height + color2[1] * y / height)
        b = int(color1[2] * (height - y) / height + color2[2] * y / height)
        draw.line([(0, y), (width, y)], fill=(r, g, b))
    return image

def get_font(font_size):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    fonts_dir = os.path.join(script_dir, "fonts")
    font_files = [f for f in os.listdir(fonts_dir) if f.endswith('.ttf')]
    
    if not font_files:
        return ImageFont.truetype("arial.ttf", font_size)
    
    bold_fonts = [f for f in font_files if 'bold' in f.lower()]
    if bold_fonts:
        font_file = random.choice(bold_fonts)
    else:
        font_file = random.choice(font_files)
    
    return ImageFont.truetype(os.path.join(fonts_dir, font_file), font_size)

def reduce_opacity(image, opacity):
    """Reduces the opacity of an image"""
    assert 0 <= opacity <= 1
    if image.mode != 'RGBA':
        image = image.convert('RGBA')
    else:
        image = image.copy()
    alpha = image.split()[3]
    alpha = alpha.point(lambda a: int(a * opacity))
    image.putalpha(alpha)
    return image

def create_rotated_text(text, font, angle, width, height):
    diagonal = int(math.sqrt(width**2 + height**2))
    txt = Image.new('RGBA', (diagonal, diagonal), (255, 255, 255, 0))
    d = ImageDraw.Draw(txt)

    bbox = font.getbbox(text)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]

    x = (diagonal - text_width) // 2
    y = (diagonal - text_height) // 2

    d.text((x, y), text, font=font, fill=(0, 0, 0, 255))  # Black text

    rotated_txt = txt.rotate(angle, expand=1, resample=Image.BICUBIC)
    return rotated_txt

def add_glow(image, amount):
    glow = image.filter(ImageFilter.GaussianBlur(amount))
    enhancer = ImageEnhance.Brightness(glow)
    glow = enhancer.enhance(1.5)
    return Image.composite(image, glow, image)

def create_border(width, height, border_width, color, gap):
    border = Image.new('RGBA', (width, height), (0, 0, 0, 0))  # Transparent background
    draw = ImageDraw.Draw(border)
    
    # Draw white edge
    draw.rectangle([(0, 0), (width-1, height-1)], fill=(255, 255, 255, 255))
    
    # Draw black border
    for i in range(border_width):
        rect = [(gap + i, gap + i), (width - gap - i - 1, height - gap - i - 1)]
        draw.rectangle(rect, outline=color)
    
    # Make the inside of the border transparent
    inner_rect = [(gap + border_width, gap + border_width), 
                  (width - gap - border_width - 1, height - gap - border_width - 1)]
    draw.rectangle(inner_rect, fill=(0, 0, 0, 0))
    
    return border

def create_poster(input_image, width, height):
    # Generate gradient background
    background = generate_gradient_background(width, height)
    
    # Resize and position the input image
    aspect_ratio = input_image.width / input_image.height
    new_height = height
    new_width = int(new_height * aspect_ratio)
    
    if new_width < width:
        new_width = width
        new_height = int(new_width / aspect_ratio)
    
    input_image = input_image.resize((new_width, new_height), Image.LANCZOS)
    x_offset = (width - new_width) // 2
    y_offset = height - new_height
    
    input_image = reduce_opacity(input_image, 0.7)  # 70% opacity
    background.paste(input_image, (x_offset, y_offset), input_image)
    
    # Add rotated text with glow effect
    font_size = int(width * 0.12)
    font = get_font(font_size)
    text = "Fluid Love"
    
    angle = random.uniform(10, 25)
    rotated_text = create_rotated_text(text, font, angle, width, height)
    glowing_text = add_glow(rotated_text, 5)
    
    paste_x = (width - glowing_text.width) // 2
    paste_y = (height - glowing_text.height) // 2
    background.paste(glowing_text, (paste_x, paste_y), glowing_text)
    
    # Add black border with white edge
    border_width = int(width * 0.02)  # 2% of width for border
    gap = int(width * 0.01)  # 1% of width for gap
    border_color = (0, 0, 0, 255)  # Black color
    border = create_border(width, height, border_width, border_color, gap)
    
    # Combine background with border
    final_image = Image.alpha_composite(background.convert('RGBA'), border)
    
    return final_image

def main():
    print("Please select an input image file.")
    input_path = select_file()
    if not input_path:
        print("No file selected. Exiting.")
        return

    output_folder = create_output_folder()
    input_filename = os.path.basename(input_path)
    name, ext = os.path.splitext(input_filename)
    output_filename = f"{name} Poster.png"
    output_path = os.path.join(output_folder, output_filename)

    try:
        image_no_bg = remove_background(input_path)
        poster = create_poster(image_no_bg, 1000, 1500)  # Poster size: 1000x1500 pixels
        poster.save(output_path)
        print(f"Poster created and saved to {output_path}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()